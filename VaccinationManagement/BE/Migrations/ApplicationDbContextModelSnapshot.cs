// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VaccinationManagement.Data;

#nullable disable

namespace VaccinationManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VaccinationManagement.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("Date_Of_Birth")
                        .HasColumnType("date");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailChangeToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailChangeTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Full_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Identity_Card")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Distribution", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Date_Import")
                        .HasColumnType("date");

                    b.Property<string>("Place_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity_Imported")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_Injected")
                        .HasColumnType("int");

                    b.Property<string>("Vaccine_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Place_Id");

                    b.HasIndex("Vaccine_Id");

                    b.ToTable("Distributions");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("Date_Of_Birth")
                        .HasColumnType("date");

                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Employee_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WardId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Place_Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("Role_Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("VaccinationManagement.Models.EmployeePosition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Position_Name");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Injection_Result", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Customer_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("Injection_Date")
                        .HasColumnType("date");

                    b.Property<int>("Injection_Number")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("Injection_Place_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IsVaccinated")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Next_Injection_Date")
                        .HasColumnType("date");

                    b.Property<int>("Number_Of_Injection")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("Prevention")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Vaccine_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Customer_Id");

                    b.HasIndex("Injection_Place_Id");

                    b.HasIndex("Vaccine_Id");

                    b.ToTable("Injection_Results");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Injection_Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateOnly>("End_Date")
                        .HasColumnType("date");

                    b.Property<string>("PerformedByEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Place_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Start_Date")
                        .HasColumnType("date");

                    b.Property<string>("Vaccine_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByEmployeeId");

                    b.HasIndex("PerformedByEmployeeId");

                    b.HasIndex("Place_Id");

                    b.HasIndex("Vaccine_Id");

                    b.ToTable("Injection_Schedules");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Menu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ParentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("VaccinationManagement.Models.MenuRoleAuthorization", b =>
                {
                    b.Property<string>("MenuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("MenuId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("MenuRoleAuthorizations");
                });

            modelBuilder.Entity("VaccinationManagement.Models.News", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("News_Type_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("News_Type_Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("VaccinationManagement.Models.NewsImages", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsImages");
                });

            modelBuilder.Entity("VaccinationManagement.Models.News_Type", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("News_Type_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("News_Types");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Place", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("VaccinationManagement.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Vaccine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contraindication")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indication")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Number_Of_Injection")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Purchase_Price")
                        .HasColumnType("int");

                    b.Property<int>("Required_Injections")
                        .HasColumnType("int");

                    b.Property<int>("Selling_Price")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("Time_Begin_Next_Injection")
                        .HasColumnType("date");

                    b.Property<int?>("Time_Between_Injections")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Time_End_Next_Injection")
                        .HasColumnType("date");

                    b.Property<string>("Usage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Vaccine_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Vaccine_Type_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("Vaccine_Type_Id");

                    b.ToTable("Vaccines", t =>
                        {
                            t.HasTrigger("trg_UpdateVaccineStatus");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("VaccinationManagement.Models.Vaccine_Type", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Vaccine_Type_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Vaccine_Types");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Customer", b =>
                {
                    b.HasOne("VaccinationManagement.Models.UserRole", "UserRole")
                        .WithMany("Customers")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Distribution", b =>
                {
                    b.HasOne("VaccinationManagement.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("Place_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccinationManagement.Models.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("Vaccine_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Employee", b =>
                {
                    b.HasOne("VaccinationManagement.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("Place_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccinationManagement.Models.EmployeePosition", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccinationManagement.Models.UserRole", "UserRole")
                        .WithMany("Employees")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Position");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Injection_Result", b =>
                {
                    b.HasOne("VaccinationManagement.Models.Customer", "Customer")
                        .WithMany("Injection_Results")
                        .HasForeignKey("Customer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccinationManagement.Models.Place", "Injection_Place")
                        .WithMany()
                        .HasForeignKey("Injection_Place_Id");

                    b.HasOne("VaccinationManagement.Models.Vaccine", "Vaccine")
                        .WithMany("Injection_Results")
                        .HasForeignKey("Vaccine_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Injection_Place");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Injection_Schedule", b =>
                {
                    b.HasOne("VaccinationManagement.Models.Employee", "CreatedByEmployee")
                        .WithMany()
                        .HasForeignKey("CreatedByEmployeeId");

                    b.HasOne("VaccinationManagement.Models.Employee", "PerformedByEmployee")
                        .WithMany()
                        .HasForeignKey("PerformedByEmployeeId");

                    b.HasOne("VaccinationManagement.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("Place_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccinationManagement.Models.Vaccine", "Vaccine")
                        .WithMany("Injection_Schedules")
                        .HasForeignKey("Vaccine_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByEmployee");

                    b.Navigation("PerformedByEmployee");

                    b.Navigation("Place");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VaccinationManagement.Models.MenuRoleAuthorization", b =>
                {
                    b.HasOne("VaccinationManagement.Models.Menu", "Menu")
                        .WithMany("MenuRoleAuthorizations")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccinationManagement.Models.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("VaccinationManagement.Models.News", b =>
                {
                    b.HasOne("VaccinationManagement.Models.Employee", "Employee")
                        .WithMany("News")
                        .HasForeignKey("AuthorId");

                    b.HasOne("VaccinationManagement.Models.News_Type", "News_Type")
                        .WithMany("News")
                        .HasForeignKey("News_Type_Id");

                    b.Navigation("Employee");

                    b.Navigation("News_Type");
                });

            modelBuilder.Entity("VaccinationManagement.Models.NewsImages", b =>
                {
                    b.HasOne("VaccinationManagement.Models.News", "News")
                        .WithMany("Images")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Vaccine", b =>
                {
                    b.HasOne("VaccinationManagement.Models.Vaccine_Type", "Vaccine_Type")
                        .WithMany("Vaccines")
                        .HasForeignKey("Vaccine_Type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaccine_Type");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Customer", b =>
                {
                    b.Navigation("Injection_Results");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Employee", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("VaccinationManagement.Models.EmployeePosition", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Menu", b =>
                {
                    b.Navigation("MenuRoleAuthorizations");
                });

            modelBuilder.Entity("VaccinationManagement.Models.News", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("VaccinationManagement.Models.News_Type", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("VaccinationManagement.Models.UserRole", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Vaccine", b =>
                {
                    b.Navigation("Injection_Results");

                    b.Navigation("Injection_Schedules");
                });

            modelBuilder.Entity("VaccinationManagement.Models.Vaccine_Type", b =>
                {
                    b.Navigation("Vaccines");
                });
#pragma warning restore 612, 618
        }
    }
}
